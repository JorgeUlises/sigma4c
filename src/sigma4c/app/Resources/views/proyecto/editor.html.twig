<link href="{{ asset('css/ol.css') }}" rel="stylesheet" type="text/css">
<script src="{{ asset('js/ol.js') }}"></script>

<div id="map" class="map"></div>

<ul class="list-inline">
  <li>
    <button type="button" class="btn btn-default" onclick="limpiarMapa()">Limpiar</button>
  </li>
  <li>
    <button type="button" class="btn btn-info" onclick="acercarGeoLocalizacion()">Zoom a mi ubicación</button>
  </li>
</ul>

<div id="info" style="display: none;"></div>
<p>
  Exactitud de la posición: <code id="accuracy"></code>&nbsp;&nbsp;
  Altitud: <code id="altitude"></code>&nbsp;&nbsp;
  Exactitud de la altura: <code id="altitudeAccuracy"></code>&nbsp;&nbsp;
  Nutación: <code id="heading"></code>&nbsp;&nbsp;
  Velocidad: <code id="speed"></code>
</p>

<script>
var idInputGeometria = 'proyecto_geometria'

function limpiarMapa () {
  features.clear()
  addInteraction()
  //accuracyFeature.setGeometry()
  //positionFeature.setGeometry()
  //source.addFeatures([accuracyFeature, positionFeature])
  geolocation.setTracking(false)
}

var raster = new ol.layer.Tile({
  source: new ol.source.OSM()
})

var view = new ol.View({
  projection: 'EPSG:4326',
  center: [-74, 4 ],
  zoom: 4
})

var map = new ol.Map({
  layers: [raster],
  target: 'map',
  view: view
})

var listenerKey = function(e) {
  console.log('Listener PostRender')
  setInitialPoint()
  map.un('postrender', listenerKey)
  map.unByKey(id)
}
var id = map.on('postrender', listenerKey)

var geolocation = new ol.Geolocation({
  projection: view.getProjection()
})

function el(id) {
  return document.getElementById(id)
}

function acercarGeoLocalizacion() {
  geolocation.setTracking(true)
}

// update the HTML page when the position changes.
geolocation.on('change', function() {
  el('accuracy').innerText = geolocation.getAccuracy() + ' [m]'
  el('altitude').innerText = geolocation.getAltitude() + ' [m]'
  el('altitudeAccuracy').innerText = geolocation.getAltitudeAccuracy() + ' [m]'
  el('heading').innerText = geolocation.getHeading() + ' [rad]'
  el('speed').innerText = geolocation.getSpeed() + ' [m/s]'
  //map.removeInteraction(draw)
  //puntoTerminado()
  geolocation.setTracking(false)
})

// handle geolocation error.
geolocation.on('error', function(error) {
  var info = document.getElementById('info')
  info.innerHTML = error.message
  info.style.display = ''
})

var accuracyFeature = new ol.Feature()
geolocation.on('change:accuracyGeometry', function() {
  accuracyFeature.setGeometry(geolocation.getAccuracyGeometry())
  //dataExtent = source.getExtent()
  dataExtent = accuracyFeature.getGeometry().getExtent()
  view.fit(dataExtent, map.getSize())
})

var positionFeature = new ol.Feature()
var estiloPunto = new ol.style.Style({
  image: new ol.style.Circle({
    radius: 6,
    fill: new ol.style.Fill({
      color: '#3399CC'
    }),
    stroke: new ol.style.Stroke({
      color: '#fff',
      width: 2
    })
  })
})
positionFeature.setStyle(estiloPunto)

geolocation.on('change:position', function() {
  var coordinates = geolocation.getPosition()
  positionFeature.setGeometry(
    coordinates ? new ol.geom.Point(coordinates) : null
  )
})

var features = new ol.Collection()
var source = new ol.source.Vector({features: features})
var featureOverlay = new ol.layer.Vector({
  source: source,
  style: new ol.style.Style({
    fill: new ol.style.Fill({
      color: 'rgba(255, 255, 255, 0.2)'
    }),
    stroke: new ol.style.Stroke({
      color: '#ffcc33',
      width: 2
    }),
    image: new ol.style.Circle({
      radius: 7,
      fill: new ol.style.Fill({
        color: '#ffcc33'
      })
    })
  })
})
//source.addFeatures([accuracyFeature, positionFeature])
featureOverlay.setMap(map)

var modify = new ol.interaction.Modify({
  features: features,
  // the SHIFT key must be pressed to delete vertices, so
  // that new vertices can be drawn at the same position
  // of existing vertices
  deleteCondition: function(event) {
    return ol.events.condition.shiftKeyOnly(event) &&
        ol.events.condition.singleClick(event)
  }
})
modify.on('modifyend', modifyEnd)

function modifyEnd() {
  console.log('Modify End')
  setTimeout(puntoTerminado, 200)
  //map.removeInteraction(modify)
}

map.addInteraction(modify)

var draw // global so we can remove it later

function addInteraction() {
  draw = new ol.interaction.Draw({
    features: features,
    type: 'Polygon'//Cambiar por http://openlayers.org/en/latest/examples/draw-features.html
  })
  draw.on('drawend', drawEnd)
  map.addInteraction(draw)
}

function drawEnd() {
  console.log('Draw End')
  map.removeInteraction(draw)
  setTimeout(puntoTerminado, 200)
}

function puntoTerminado() {
  //window.alert('punto terminado')
  var featuresSource = source.getFeatures()
  //var featuresCollection = source.getFeaturesCollection().getArray()
  //featuresSource.concat(featuresCollection)
  for (var i=0; i<featuresSource.length; i++) {
    var feature = featuresSource[i]
    var geometry = feature.getGeometry()
    console.log(geometry.getType())
    if (geometry != undefined) {
      if (geometry.getType() === 'Polygon') {
        var coordenadas = geometry.getCoordinates()
        var strCoordenadas = ""
        for (var i = 0; i < coordenadas.length; i++) {
          console.log(coordenadas[i])
          var x = coordenadas[i][0]
          var y = coordenadas[i][1]
          strCoordenadas += ',' + x + ' ' + y
        }
        el(window.idInputGeometria).value = strCoordenadas
      }
    }
  }
}


/**
 * Handle change event.
 */
addInteraction()

function setInitialPoint() {
  var coordenadas = el(window.idInputGeometria).value
  if (coordenadas === '') {
    return
  }

  coordenadas = coordenadas.split(' ')
  console.log(coordenadas)
  var x = parseFloat(coordenadas[0])
  var y = parseFloat(coordenadas[1])

  view.setCenter([x, y])
  view.setZoom(20)

  var punto = new ol.geom.Point([x, y])
  positionFeature.setGeometry(punto)

  map.removeInteraction(draw)
  //var feature = new ol.Feature()
  //feature.setStyle(estiloPunto)
  //source.addFeature(feature)
}

</script>
